// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"reflect"

	mock "github.com/stretchr/testify/mock"
)

// Expecter is an autogenerated mock type for the Expecter type
type Expecter struct {
	mock.Mock
}

type Expecter_Expecter struct {
	mock *mock.Mock
}

func (_m *Expecter) EXPECT() *Expecter_Expecter {
	return &Expecter_Expecter{mock: &_m.Mock}
}

// ManyArgsReturns provides a mock function with given fields: str, i
func (_m *Expecter) ManyArgsReturns(str string, i int) ([]string, error) {
	ret := _m.Called(str, i)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]string, error)); ok {
		return rf(str, i)
	}
	if rf, ok := ret.Get(0).(func(string, int) []string); ok {
		r0 = rf(str, i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(str, i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Expecter_ManyArgsReturns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManyArgsReturns'
type Expecter_ManyArgsReturns_Call struct {
	*mock.Call
}

// ManyArgsReturns is a helper method to define mock.On call
//   - str string
//   - i int
func (_e *Expecter_Expecter) ManyArgsReturns(str interface{}, i interface{}) *Expecter_ManyArgsReturns_Call {
	return &Expecter_ManyArgsReturns_Call{Call: _e.mock.On("ManyArgsReturns", str, i)}
}

func (_c *Expecter_ManyArgsReturns_Call) Run(run func(str string, i int)) *Expecter_ManyArgsReturns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *Expecter_ManyArgsReturns_Call) Return(strs []string, err error) *Expecter_ManyArgsReturns_Call {
	_c.Call.Return(strs, err)
	return _c
}

func (_c *Expecter_ManyArgsReturns_Call) RunAndReturn(run func(string, int) ([]string, error)) *Expecter_ManyArgsReturns_Call {
	_c.Call.Return(run)
	return _c
}

// NoArg provides a mock function with given fields:
func (_m *Expecter) NoArg() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Expecter_NoArg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoArg'
type Expecter_NoArg_Call struct {
	*mock.Call
}

// NoArg is a helper method to define mock.On call
func (_e *Expecter_Expecter) NoArg() *Expecter_NoArg_Call {
	return &Expecter_NoArg_Call{Call: _e.mock.On("NoArg")}
}

func (_c *Expecter_NoArg_Call) Run(run func()) *Expecter_NoArg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Expecter_NoArg_Call) Return(_a0 string) *Expecter_NoArg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Expecter_NoArg_Call) RunAndReturn(run func() string) *Expecter_NoArg_Call {
	_c.Call.Return(run)
	return _c
}

// NoReturn provides a mock function with given fields: str
func (_m *Expecter) NoReturn(str string) {
	_m.Called(str)
}

// Expecter_NoReturn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoReturn'
type Expecter_NoReturn_Call struct {
	*mock.Call
}

// NoReturn is a helper method to define mock.On call
//   - str string
func (_e *Expecter_Expecter) NoReturn(str interface{}) *Expecter_NoReturn_Call {
	return &Expecter_NoReturn_Call{Call: _e.mock.On("NoReturn", str)}
}

func (_c *Expecter_NoReturn_Call) Run(run func(str string)) *Expecter_NoReturn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Expecter_NoReturn_Call) Return() *Expecter_NoReturn_Call {
	_c.Call.Return()
	return _c
}

func (_c *Expecter_NoReturn_Call) RunAndReturn(run func(string)) *Expecter_NoReturn_Call {
	_c.Call.Return(run)
	return _c
}

// Variadic provides a mock function with given fields: ints
func (_m *Expecter) Variadic(ints ...int) error {
	var vararg []interface{}
	if len(ints) > 0 {
		vararg = make([]interface{}, len(ints))
		for _i, _a := range ints {
			vararg[_i] = _a
		}
	}

	ret := _m.Called(vararg)

	var r0 error
	if rf, ok := ret.Get(0).(func(...int) error); ok {
		r0 = rf(ints...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Expecter_Variadic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Variadic'
type Expecter_Variadic_Call struct {
	*mock.Call
}

// Variadic is a helper method to define mock.On call
//   - ints ...int
func (_e *Expecter_Expecter) Variadic(ints ...interface{}) *Expecter_Variadic_Call {
	var vararg interface{} = ints
	if len(ints) == 1 && ints[0] == mock.Anything {
		vararg = ints[0]
	}
	return &Expecter_Variadic_Call{Call: _e.mock.On("Variadic", vararg)}
}

func (_c *Expecter_Variadic_Call) Run(run func(ints ...int)) *Expecter_Variadic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicIntfs := args[0].([]interface{})
		variadicArgs := make([]int, len(variadicIntfs))
		for i, a := range variadicIntfs {
			if a != nil {
				variadicArgs[i] = a.(int)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Expecter_Variadic_Call) Return(_a0 error) *Expecter_Variadic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Expecter_Variadic_Call) RunAndReturn(run func(...int) error) *Expecter_Variadic_Call {
	_c.Call.Return(run)
	return _c
}

// VariadicMany provides a mock function with given fields: i, a, intfs
func (_m *Expecter) VariadicMany(i int, a string, intfs ...interface{}) error {
	var vararg []interface{}
	if len(intfs) > 0 {
		vararg = make([]interface{}, len(intfs))
		for _i, _a := range intfs {
			vararg[_i] = _a
		}
	}

	ret := _m.Called(i, a, vararg)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, ...interface{}) error); ok {
		r0 = rf(i, a, intfs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Expecter_VariadicMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VariadicMany'
type Expecter_VariadicMany_Call struct {
	*mock.Call
}

// VariadicMany is a helper method to define mock.On call
//   - i int
//   - a string
//   - intfs ...interface{}
func (_e *Expecter_Expecter) VariadicMany(i interface{}, a interface{}, intfs ...interface{}) *Expecter_VariadicMany_Call {
	var vararg interface{} = intfs
	if len(intfs) == 1 && intfs[0] == mock.Anything {
		vararg = intfs[0]
	}
	return &Expecter_VariadicMany_Call{Call: _e.mock.On("VariadicMany", i, a, vararg)}
}

func (_c *Expecter_VariadicMany_Call) Run(run func(i int, a string, intfs ...interface{})) *Expecter_VariadicMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicIntfs := args[2].([]interface{})
		variadicArgs := make([]interface{}, len(variadicIntfs))
		for i, a := range variadicIntfs {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(int), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Expecter_VariadicMany_Call) Return(_a0 error) *Expecter_VariadicMany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Expecter_VariadicMany_Call) RunAndReturn(run func(int, string, ...interface{}) error) *Expecter_VariadicMany_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewExpecter interface {
	mock.TestingT
	Cleanup(func())
}

// NewExpecter creates a new instance of Expecter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExpecter(t mockConstructorTestingTNewExpecter) *Expecter {
	mock := &Expecter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

func (_m *Expecter) rollVariadic(methodName string, arguments ...interface{}) []interface{} {
	sig := _m.getMethodSignature(methodName)

	if !sig.IsVariadic() {
		return arguments
	}

	variadicIndex := sig.NumIn() - 1
	if len(arguments) == sig.NumIn() && arguments[variadicIndex] == mock.Anything {
		return arguments
	}

	newArgs := make([]interface{}, sig.NumIn())

	copy(newArgs, arguments[0:variadicIndex])

	if len(arguments) >= sig.NumIn() {
		newArgs[variadicIndex] = arguments[variadicIndex:]
	} else {
		newArgs[variadicIndex] = []interface{}(nil)
	}

	return newArgs
}

func (_m *Expecter) getMethodSignature(methodName string) reflect.Type {
	switch methodName {
	case "ManyArgsReturns":
		return reflect.TypeOf(_m.ManyArgsReturns)
	case "NoArg":
		return reflect.TypeOf(_m.NoArg)
	case "NoReturn":
		return reflect.TypeOf(_m.NoReturn)
	case "Variadic":
		return reflect.TypeOf(_m.Variadic)
	case "VariadicMany":
		return reflect.TypeOf(_m.VariadicMany)
	default:
		panic("Invalid method name")
	}
}

func (_m *Expecter) On(methodName string, arguments ...interface{}) *mock.Call {
	arguments = _m.rollVariadic(methodName, arguments...)
	return _m.Mock.On(methodName, arguments...)
}

func (_m *Expecter) AssertCalled(t mock.TestingT, methodName string, arguments ...interface{}) bool {
	arguments = _m.rollVariadic(methodName, arguments...)
	return _m.Mock.AssertCalled(t, methodName, arguments...)
}

func (_m *Expecter) AssertNotCalled(t mock.TestingT, methodName string, arguments ...interface{}) bool {
	arguments = _m.rollVariadic(methodName, arguments...)
	return _m.Mock.AssertNotCalled(t, methodName, arguments...)
}
