// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	"reflect"

	mock "github.com/stretchr/testify/mock"
)

// MapToInterface is an autogenerated mock type for the MapToInterface type
type MapToInterface struct {
	mock.Mock
}

// Foo provides a mock function with given fields: arg1
func (_m *MapToInterface) Foo(arg1 ...map[string]interface{}) {
	var vararg []interface{}
	if len(arg1) > 0 {
		vararg = make([]interface{}, len(arg1))
		for _i, _a := range arg1 {
			vararg[_i] = _a
		}
	}

	_m.Called(vararg)
}

type mockConstructorTestingTNewMapToInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMapToInterface creates a new instance of MapToInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMapToInterface(t mockConstructorTestingTNewMapToInterface) *MapToInterface {
	mock := &MapToInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

func (_m *MapToInterface) rollVariadic(methodName string, arguments ...interface{}) []interface{} {
	sig := _m.getMethodSignature(methodName)

	if !sig.IsVariadic() {
		return arguments
	}

	variadicIndex := sig.NumIn() - 1
	if len(arguments) == sig.NumIn() && arguments[variadicIndex] == mock.Anything {
		return arguments
	}

	newArgs := make([]interface{}, sig.NumIn())

	copy(newArgs, arguments[0:variadicIndex])

	if len(arguments) >= sig.NumIn() {
		newArgs[variadicIndex] = arguments[variadicIndex:]
	} else {
		newArgs[variadicIndex] = []interface{}(nil)
	}

	return newArgs
}

func (_m *MapToInterface) getMethodSignature(methodName string) reflect.Type {
	switch methodName {
	case "Foo":
		return reflect.TypeOf(_m.Foo)
	default:
		panic("Invalid method name")
	}
}

func (_m *MapToInterface) On(methodName string, arguments ...interface{}) *mock.Call {
	arguments = _m.rollVariadic(methodName, arguments...)
	return _m.Mock.On(methodName, arguments...)
}

func (_m *MapToInterface) AssertCalled(t mock.TestingT, methodName string, arguments ...interface{}) bool {
	arguments = _m.rollVariadic(methodName, arguments...)
	return _m.Mock.AssertCalled(t, methodName, arguments...)
}

func (_m *MapToInterface) AssertNotCalled(t mock.TestingT, methodName string, arguments ...interface{}) bool {
	arguments = _m.rollVariadic(methodName, arguments...)
	return _m.Mock.AssertNotCalled(t, methodName, arguments...)
}
