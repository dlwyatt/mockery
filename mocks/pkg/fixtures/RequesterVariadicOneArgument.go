// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	io "io"
	"reflect"

	mock "github.com/stretchr/testify/mock"
)

// RequesterVariadicOneArgument is an autogenerated mock type for the RequesterVariadic type
type RequesterVariadicOneArgument struct {
	mock.Mock
}

// Get provides a mock function with given fields: values
func (_m *RequesterVariadicOneArgument) Get(values ...string) bool {
	var vararg []interface{}
	if len(values) > 0 {
		vararg = make([]interface{}, len(values))
		for _i, _a := range values {
			vararg[_i] = _a
		}
	}

	ret := _m.Called(vararg)

	var r0 bool
	if rf, ok := ret.Get(0).(func(...string) bool); ok {
		r0 = rf(values...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MultiWriteToFile provides a mock function with given fields: filename, w
func (_m *RequesterVariadicOneArgument) MultiWriteToFile(filename string, w ...io.Writer) string {
	var vararg []interface{}
	if len(w) > 0 {
		vararg = make([]interface{}, len(w))
		for _i, _a := range w {
			vararg[_i] = _a
		}
	}

	ret := _m.Called(filename, vararg)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...io.Writer) string); ok {
		r0 = rf(filename, w...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OneInterface provides a mock function with given fields: a
func (_m *RequesterVariadicOneArgument) OneInterface(a ...interface{}) bool {
	var vararg []interface{}
	if len(a) > 0 {
		vararg = make([]interface{}, len(a))
		for _i, _a := range a {
			vararg[_i] = _a
		}
	}

	ret := _m.Called(vararg)

	var r0 bool
	if rf, ok := ret.Get(0).(func(...interface{}) bool); ok {
		r0 = rf(a...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Sprintf provides a mock function with given fields: format, a
func (_m *RequesterVariadicOneArgument) Sprintf(format string, a ...interface{}) string {
	var vararg []interface{}
	if len(a) > 0 {
		vararg = make([]interface{}, len(a))
		for _i, _a := range a {
			vararg[_i] = _a
		}
	}

	ret := _m.Called(format, vararg)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(format, a...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewRequesterVariadicOneArgument interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequesterVariadicOneArgument creates a new instance of RequesterVariadicOneArgument. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequesterVariadicOneArgument(t mockConstructorTestingTNewRequesterVariadicOneArgument) *RequesterVariadicOneArgument {
	mock := &RequesterVariadicOneArgument{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

func (_m *RequesterVariadicOneArgument) rollVariadic(methodName string, arguments ...interface{}) []interface{} {
	sig := _m.getMethodSignature(methodName)

	if !sig.IsVariadic() {
		return arguments
	}

	variadicIndex := sig.NumIn() - 1
	if len(arguments) == sig.NumIn() && arguments[variadicIndex] == mock.Anything {
		return arguments
	}

	newArgs := make([]interface{}, sig.NumIn())

	copy(newArgs, arguments[0:variadicIndex])

	if len(arguments) >= sig.NumIn() {
		newArgs[variadicIndex] = arguments[variadicIndex:]
	} else {
		newArgs[variadicIndex] = []interface{}(nil)
	}

	return newArgs
}

func (_m *RequesterVariadicOneArgument) getMethodSignature(methodName string) reflect.Type {
	switch methodName {
	case "Get":
		return reflect.TypeOf(_m.Get)
	case "MultiWriteToFile":
		return reflect.TypeOf(_m.MultiWriteToFile)
	case "OneInterface":
		return reflect.TypeOf(_m.OneInterface)
	case "Sprintf":
		return reflect.TypeOf(_m.Sprintf)
	default:
		panic("Invalid method name")
	}
}

func (_m *RequesterVariadicOneArgument) On(methodName string, arguments ...interface{}) *mock.Call {
	arguments = _m.rollVariadic(methodName, arguments...)
	return _m.Mock.On(methodName, arguments...)
}

func (_m *RequesterVariadicOneArgument) AssertCalled(t mock.TestingT, methodName string, arguments ...interface{}) bool {
	arguments = _m.rollVariadic(methodName, arguments...)
	return _m.Mock.AssertCalled(t, methodName, arguments...)
}

func (_m *RequesterVariadicOneArgument) AssertNotCalled(t mock.TestingT, methodName string, arguments ...interface{}) bool {
	arguments = _m.rollVariadic(methodName, arguments...)
	return _m.Mock.AssertNotCalled(t, methodName, arguments...)
}
